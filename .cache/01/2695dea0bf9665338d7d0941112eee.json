{"id":"ie/proxy.html","dependencies":[{"name":"./proxy.js","dynamic":true,"resolved":"/Users/javiercepeda/Programacion/javascript profesional/ie/proxy.js","parent":"/Users/javiercepeda/Programacion/javascript profesional/ie/proxy.html"},{"name":"/Users/javiercepeda/Programacion/javascript profesional/package.json","includedInParent":true,"mtime":1656595240094}],"generated":{"html":"<html>\n  <head>\n    <title>Proxy</title>\n  </head>\n\n  <body>\n    <a href=\"/ejercicios/\">Go back</a>\n    <p><em>Abre la consola</em></p>\n\n    <script src=\"https://unpkg.com/fast-levenshtein@2.0.6/levenshtein.js\"></script>\n    <script src=\"/ed78fdcce70a49ac0af8c68b1d1d6e0c.js\">// Proxy es parecido a getters y setters\n// Usa un concepto que se llama traps: son interceptores de llamadas. A diferencia de getters, no opera sobre una propieda, si no sobre un objeto.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#Methods_of_the_handler_object\n// Creemos un ejemplo donde interceptamos llamadas para leer una propiedad\n// Si la propiedad existe, la regresamos\n// Si no existe, entonces sugerimos una que pueda funcionar\n// Para eso eso vamos a usar un algoritmo que se llama Levenshtein. (window.Levenshtein.get)\n// Ejemplos de levenshtein distance (usa window.Levenshtein)\n// const target = {\n//   red: 'Rojo',\n//   green: 'Verde',\n//   blue: 'Azul',\n// };\n// const handler = {\n//   get(obj, prop) {\n//     if (prop in obj) {\n//       return obj[prop];\n//     }\n//     const suggestion = Object.keys(obj).find(key => {\n//       return Levenshtein.get(key, prop) <= 3;\n//     });\n//     if (suggestion) {\n//       console.log(\n//         `${prop} no se encontrÃ³. Quisiste decir ${suggestion}?`\n//       );\n//     }\n//     return obj[prop];\n//   },\n// };\n// const p = new Proxy(target, handler);</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"4b4d8623557919601d7de0aa174b01ad","cacheData":{"env":{}}}